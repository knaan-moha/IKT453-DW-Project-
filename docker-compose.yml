# version: "3"

services:
  web-server:
    image: php:7.4.3-apache
    volumes:
      - "./html/:/var/www/html/"
    ports:
      - "8082:80"

  mysql-odb-server:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - mysql-odb-data:/var/lib/mysql_odb
    ports:
      - "13306:3306"

  mysql-dw-server:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - mysql-dw-data:/var/lib/mysql
    ports:
      - "23306:3306"

  phpmyadmin-odb:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysql-odb-server
      PMA_USER: root
      PMA_PASSWORD: secret
    ports:
      - "15000:80"

  phpmyadmin-dw:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysql-dw-server
      PMA_USER: root
      PMA_PASSWORD: secret
    ports:
      - "25000:80"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://127.0.0.1:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root  # Admin username
      MONGO_INITDB_ROOT_PASSWORD: secret  # Admin password
    command: ["mongod", "--auth"]  # Enabling authentication

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: root  # MongoDB admin username
      ME_CONFIG_MONGODB_ADMINPASSWORD: secret  # MongoDB admin password
      ME_CONFIG_MONGODB_AUTH_DATABASE: admin  # Authentication database
      ME_CONFIG_BASICAUTH: false  # Optional: Set to true if you need basic auth for Mongo Express
    ports:
      - "8081:8081"

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
    environment:
      NEO4J_AUTH: neo4j/StrongPassword123

  my_server:
    build:
      context: ./my_server
    container_name: flask_server
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - mysql-odb-server
      - mysql-dw-server
      - mongodb
      - neo4j
    environment:
      FLASK_ENV: development
      FLASK_APP: my_server/main.py

      # MySQL ODB (Optional: only if you're also using it)
      MYSQL_ODB_HOST: mysql-odb-server
      MYSQL_ODB_PORT: 3306
      MYSQL_ODB_USER: root
      MYSQL_ODB_PASSWORD: secret
      MYSQL_ODB_DB: my_odb_database

      # MySQL DW
      MYSQL_DW_HOST: mysql-dw-server
      MYSQL_DW_PORT: 3306
      MYSQL_DW_USER: root
      MYSQL_DW_PASSWORD: secret
      MYSQL_DW_DB: my_dw_database

      # MongoDB
      MONGO_URI: mongodb://root:secret@mongodb:27017/
      MONGO_DB: my_mongo_database

      # Neo4j
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: StrongPassword123

    command: flask run --host=0.0.0.0 --port=5000

volumes:
  mysql-odb-data:
  mysql-dw-data:
  mongodb-data:
  neo4j-data:
